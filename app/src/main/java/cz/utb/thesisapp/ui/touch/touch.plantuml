@startuml

title __TOUCH's Class Diagram__\n

  namespace cz.utb.thesisapp {
    namespace ui.touch {
      class cz.utb.thesisapp.ui.touch.MyDrawingView {
          + act : Activity
          + paint : Paint
          {static} - TAG : String
          - TOUCH_TOLERANCE : float
          - bitmap : Bitmap
          - bitmapPaint : Paint
          - canvas : Canvas
          - canvasH : int
          - canvasW : int
          - drawMode : boolean
          - eraserSize : float
          - path : Path
          - penSize : float
          - thisApp : boolean
          - tv : TextView
          - x : float
          - y : float
          + MyDrawingView()
          + MyDrawingView()
          + MyDrawingView()
          + clear()
          + getCanvasH()
          + getCanvasW()
          + getEraserSize()
          + getPenColor()
          + getPenSize()
          + initializeEraser()
          + initializePen()
          + isThisApp()
          + loadImage()
          + onTouchEvent()
          + remoteTouchEvent()
          + saveImage()
          + setBackgroundColor()
          + setEraserSize()
          + setPenColor()
          + setPenSize()
          + setTextView()
          + setThisApp()
          # onDraw()
          # onSizeChanged()
          - init()
          - touchMove()
          - touchStart()
          - touchUp()
      }
    }
  }
  

  namespace cz.utb.thesisapp {
    namespace ui.touch {
      class cz.utb.thesisapp.ui.touch.TouchFragment {
          ~ data : LineData
          ~ dataSets : ArrayList<ILineDataSet>
          ~ dataSize : int
          ~ df : SimpleDateFormat
          ~ root : View
          ~ runningTask : AsyncTask<Void, Void, Integer>
          ~ set1 : LineDataSet
          ~ startTime : Date
          ~ threadRun : boolean
          ~ yValues : List
          {static} - TAG : String
          - mChart : LineChart
          - mPaint : Paint
          - mReceiver : BroadcastReceiver
          - maReiver : BroadcastReceiver
          - thread : Thread
          + onCreateView()
          + onPause()
          + onResume()
          + onStop()
          + startPlot()
          - addDataToChart()
          - countTime()
          - getTime()
          - plot()
          - update()
      }
    }
  }
  

  namespace cz.utb.thesisapp {
    namespace ui.touch {
      class cz.utb.thesisapp.ui.touch.TouchFragment.TestTask {
          # doInBackground()
          # onPostExecute()
      }
    }
  }
  

  namespace cz.utb.thesisapp {
    namespace ui.touch {
      class cz.utb.thesisapp.ui.touch.TouchViewModel {
          {static} - TAG : String
          - mText : MutableLiveData<String>
          - test : MutableLiveData<Integer>
          - touch : MutableLiveData<ArrayList<Touch>>
          + TouchViewModel()
          + getTest()
          + getText()
          + getTouch()
          + setTest()
          + setTouch()
      }
    }
  }
  

  cz.utb.thesisapp.ui.touch.MyDrawingView -up-|> android.view.View
  cz.utb.thesisapp.ui.touch.TouchFragment -up-|> androidx.fragment.app.Fragment
  cz.utb.thesisapp.ui.touch.TouchFragment o-- cz.utb.thesisapp.ui.touch.MyDrawingView : dvRemoteApp
  cz.utb.thesisapp.ui.touch.TouchFragment o-- cz.utb.thesisapp.ui.touch.MyDrawingView : dvThisApp
  cz.utb.thesisapp.ui.touch.TouchFragment o-- cz.utb.thesisapp.ui.info.InfoViewModel : infoViewModel
  cz.utb.thesisapp.ui.touch.TouchFragment o-- cz.utb.thesisapp.ui.touch.TouchViewModel : touchViewModel
  cz.utb.thesisapp.ui.touch.TouchFragment +-down- cz.utb.thesisapp.ui.touch.TouchFragment.TestTask
  cz.utb.thesisapp.ui.touch.TouchFragment.TestTask -up-|> android.os.AsyncTask
  cz.utb.thesisapp.ui.touch.TouchViewModel -up-|> androidx.lifecycle.ViewModel


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
